/* eslint-disable @typescript-eslint/no-unused-vars */

/** Declaration file generated by dts-gen */

import { Mesh } from 'three'

export class GlyphsGeometry {
	constructor(...args: unknown[]);

	applyClipRect(...args: unknown[]): void;

	computeBoundingBox(...args: unknown[]): void;

	computeBoundingSphere(...args: unknown[]): void;

	setSide(...args: unknown[]): void;

	updateGlyphs(...args: unknown[]): void;

}
export type anchorY = 'middle' | 'top' | 'bottom'
export type anchorX = 'center' | 'left' | 'right'
export class Text extends THREE.Object3D {
	text: string
	fontSize: number
	fillOpacity: number
	outlineOpacity: number
	font: string
	anchorY: anchorY
	anchorX: anchorX
	color: string | number
	maxWidth: number
	outlineWidth: number
	constructor(...args: unknown[]);

	clone(...args: unknown[]): Text;

	copy(...args: unknown[]): Text;

	dispose(...args: unknown[]): void;

	localPositionToTextCoords(...args: unknown[]): void;

	onAfterRender(...args: unknown[]): void;

	onBeforeRender(...args: unknown[]): void;

	raycast(...args: unknown[]): void;

	sync(...args: unknown[]): void;

	worldPositionToTextCoords(...args: unknown[]): void;

	static DefaultMatrixAutoUpdate: boolean

	static DefaultMatrixWorldAutoUpdate: boolean

}

export function configureTextBuilder(config: unknown): void;

export function createTextDerivedMaterial(baseMaterial: unknown): unknown;

export function dumpSDFTextures(): void;

export function getCaretAtPoint(textRenderInfo: unknown, x: unknown, y: unknown): unknown;

export function getSelectionRects(textRenderInfo: unknown, start: unknown, end: unknown): unknown;

export function preloadFont({ font, characters, sdfGlyphSize }: unknown, callback: unknown): void;

export function typesetterWorkerModule(...args: unknown[]): unknown;

export namespace Text {
    namespace DefaultUp {
        const isVector3: boolean

        const x: number

        const y: number

        const z: number

        function add(...args: unknown[]): void;

        function addScalar(...args: unknown[]): void;

        function addScaledVector(...args: unknown[]): void;

        function addVectors(...args: unknown[]): void;

        function angleTo(...args: unknown[]): void;

        function applyAxisAngle(...args: unknown[]): void;

        function applyEuler(...args: unknown[]): void;

        function applyMatrix3(...args: unknown[]): void;

        function applyMatrix4(...args: unknown[]): void;

        function applyNormalMatrix(...args: unknown[]): void;

        function applyQuaternion(...args: unknown[]): void;

        function ceil(...args: unknown[]): void;

        function clamp(...args: unknown[]): void;

        function clampLength(...args: unknown[]): void;

        function clampScalar(...args: unknown[]): void;

        function clone(...args: unknown[]): void;

        function copy(...args: unknown[]): void;

        function cross(...args: unknown[]): void;

        function crossVectors(...args: unknown[]): void;

        function distanceTo(...args: unknown[]): void;

        function distanceToSquared(...args: unknown[]): void;

        function divide(...args: unknown[]): void;

        function divideScalar(...args: unknown[]): void;

        function dot(...args: unknown[]): void;

        function equals(...args: unknown[]): void;

        function floor(...args: unknown[]): void;

        function fromArray(...args: unknown[]): void;

        function fromBufferAttribute(...args: unknown[]): void;

        function getComponent(...args: unknown[]): void;

        function length(...args: unknown[]): void;

        function lengthSq(...args: unknown[]): void;

        function lerp(...args: unknown[]): void;

        function lerpVectors(...args: unknown[]): void;

        function manhattanDistanceTo(...args: unknown[]): void;

        function manhattanLength(...args: unknown[]): void;

        function max(...args: unknown[]): void;

        function min(...args: unknown[]): void;

        function multiply(...args: unknown[]): void;

        function multiplyScalar(...args: unknown[]): void;

        function multiplyVectors(...args: unknown[]): void;

        function negate(...args: unknown[]): void;

        function normalize(...args: unknown[]): void;

        function project(...args: unknown[]): void;

        function projectOnPlane(...args: unknown[]): void;

        function projectOnVector(...args: unknown[]): void;

        function random(...args: unknown[]): void;

        function randomDirection(...args: unknown[]): void;

        function reflect(...args: unknown[]): void;

        function round(...args: unknown[]): void;

        function roundToZero(...args: unknown[]): void;

        function set(...args: unknown[]): void;

        function setComponent(...args: unknown[]): void;

        function setFromCylindrical(...args: unknown[]): void;

        function setFromCylindricalCoords(...args: unknown[]): void;

        function setFromEuler(...args: unknown[]): void;

        function setFromMatrix3Column(...args: unknown[]): void;

        function setFromMatrixColumn(...args: unknown[]): void;

        function setFromMatrixPosition(...args: unknown[]): void;

        function setFromMatrixScale(...args: unknown[]): void;

        function setFromSpherical(...args: unknown[]): void;

        function setFromSphericalCoords(...args: unknown[]): void;

        function setLength(...args: unknown[]): void;

        function setScalar(...args: unknown[]): void;

        function setX(...args: unknown[]): void;

        function setY(...args: unknown[]): void;

        function setZ(...args: unknown[]): void;

        function sub(...args: unknown[]): void;

        function subScalar(...args: unknown[]): void;

        function subVectors(...args: unknown[]): void;

        function toArray(...args: unknown[]): void;

        function transformDirection(...args: unknown[]): void;

        function unproject(...args: unknown[]): void;

    }

}

